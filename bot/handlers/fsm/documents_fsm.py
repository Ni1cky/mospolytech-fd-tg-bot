import datetime
from typing import Any, Dict

import pymorphy3

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message,
    CallbackQuery,
    InputMediaDocument,
    FSInputFile
)
from docxtpl import DocxTemplate

from bot.handlers.keyboards import inline_agreement_keyboard

documents_fsm_router = Router()


class ApplicationForm(StatesGroup):
    group_number = State()
    agreement = State()
    program_name = State()
    full_name = State()
    phone = State()
    current_date = State()
    email = State()


def cap_current_date():
    return '.'.join(reversed((str(datetime.date.today()).split('-'))))

@documents_fsm_router.message(F.text == "üìÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ")
@documents_fsm_router.message(Command("documents"))
async def start_filling_documents(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ:\n –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏:\n"
        "* –§–∏–æ\n"
        "* –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "* Email\n"
        "* –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã\n"
        "–ü—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø—É–Ω–∫—Ç–æ–≤, –º—ã –ø—Ä–∏—à–ª–µ–º —Ç–µ–±–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å."
        "\n–ü—Ä–æ–¥–æ–ª–∂–∏–º?",
        reply_markup=inline_agreement_keyboard()
    )
    await state.set_state(ApplicationForm.agreement)


@documents_fsm_router.callback_query(F.data == "stop", ApplicationForm.agreement)
async def stop(call: CallbackQuery, state: FSMContext):
    await call.answer("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /documents")
    await state.clear()


def qualification_from_program(program_name: str):
    # TODO: Some logic of getting qualification name from program name
    return "–õ—É—á—à–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ –º–∏—Ä–µ"


def create_documents(data: Dict[str, Any]) -> list[InputMediaDocument]:
    result = []

    data["date"] = cap_current_date()
    data["full_name_gent"] = genter(data["full_name"])
    data["qualification_name"] = qualification_from_program(data["program_name"])

    statement = DocxTemplate("docs_templates/statement_template.docx")
    statement.render(data)
    file_path = f"created_docs/Statement {data['full_name']} {datetime.datetime.now().strftime('%d.%m.%Y-%H.%M.%S')}.docx"
    statement.save(file_path)

    statement_to_return = InputMediaDocument(media=FSInputFile(file_path))
    result.append(statement_to_return)

    return result


@documents_fsm_router.callback_query(F.data == "continue", ApplicationForm.agreement)
async def claim_agreement(call: CallbackQuery, state: FSMContext):
    await call.answer("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
    await call.message.edit_reply_markup(reply_markup=None)

    data = await state.get_data()
    if data.get("agreement"):
        await call.message.answer("–ü—Ä–∏—Å—ã–ª–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–¥–ø–∏—à–∏ –µ–≥–æ –∏ –æ—Ç–Ω–µ—Å–∏ –≤ –æ—Ç–¥–µ–ª –ú–§–¶ –ª—é–±–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞!")
        await call.message.answer_media_group(create_documents(data))
        await state.clear()
        return

    await call.message.answer("–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏.\n"
                              "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é. (–ü–æ–∫–∞ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥).")  # –ó–î–ï–°–¨ –ù–ê–î–û –ë–£–î–ï–¢
    # –ü–û–ú–ï–ù–Ø–¢–¨, –î–õ–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–ò –ö–ù–û–ü–ö–ê–ú–ò
    await state.update_data(agreement=True)
    await state.set_state(ApplicationForm.program_name)


@documents_fsm_router.message(F.text, ApplicationForm.program_name)
async def capture_program_name(message: Message, state: FSMContext):
    await state.update_data(program_name=message.text)
    await message.answer("–§–ò–û:\n"
                         "(–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)")
    await state.set_state(ApplicationForm.full_name)


def genter(word: str):
    morph = pymorphy3.MorphAnalyzer()
    results = []
    for part in word.split():
        result = morph.parse(part)[0].inflect({"gent"}).word
        results.append(result)
    return results


@documents_fsm_router.message(F.text, ApplicationForm.full_name)
async def capture_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n"
                         "(89269997799)")
    await state.set_state(ApplicationForm.phone)


def format_phone_number(phone_number: str):
    digits = "".join([digit for digit in phone_number if digit.isdigit()])
    formatted_number = f"+{digits[:-10]} ({digits[-10:-7]}) {digits[-7:-4]}-{digits[-4:-2]}-{digits[-2:]}"
    if formatted_number[1] == "8" and len(digits) == 11:
        formatted_number = "+7" + formatted_number[2:]
    return formatted_number


@documents_fsm_router.message(F.text, ApplicationForm.phone)
async def capture_phone(message: Message, state: FSMContext):
    await state.update_data(phone=format_phone_number(message.text))
    await message.answer("Email:\n"
                         "(abc@abc.abc)")
    await state.set_state(ApplicationForm.email)


@documents_fsm_router.message(F.text, ApplicationForm.email)
async def capture_email(message: Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer("–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:\n"
                         "(123-123)")
    await state.set_state(ApplicationForm.group_number)


@documents_fsm_router.message(F.text, ApplicationForm.group_number)
async def group_number(message: Message, state: FSMContext):
    await state.update_data(group_number=message.text)
    data = await state.get_data()
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã!\n"
        f"–¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∏–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n"
        f"‚úì –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã: {data['group_number']}\n"
        f"‚úì –ü—Ä–æ–≥—Ä–∞–º–º–∞: {data['program_name']}\n"
        f"‚úì –§–ò–û: {data['full_name']}\n"
        f"‚úì –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data['phone']}\n"
        f"‚úì Email {data['email']}\n"
        f"–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–∏–º–∞–π –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
        reply_markup=inline_agreement_keyboard()
    )
    await state.set_state(ApplicationForm.agreement)
